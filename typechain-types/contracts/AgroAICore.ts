/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AgroAICoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "activeAlerts"
      | "activeTreatments"
      | "agroToken"
      | "allDetections"
      | "callbackGasLimit"
      | "checkUpkeep"
      | "communityAlerts"
      | "communityAlertsSource"
      | "completeTreatment"
      | "detections"
      | "donID"
      | "emergencyPause"
      | "ethUsdPriceFeed"
      | "gasLimit"
      | "getActiveCommunityAlerts"
      | "getUserDetections"
      | "handleOracleFulfillment"
      | "keyHash"
      | "lastUpkeepTime"
      | "marketIntelligenceSource"
      | "numWords"
      | "owner"
      | "pendingRequests"
      | "performUpkeep"
      | "photoVerificationSource"
      | "processPurchase"
      | "purchaseOptimizationSource"
      | "rawFulfillRandomWords"
      | "requestConfirmations"
      | "requestPhotoAnalysis"
      | "requestRandomness"
      | "startTreatment"
      | "subscriptionId"
      | "transferOwnership"
      | "treatmentTrackingSource"
      | "treatments"
      | "updateConfig"
      | "upkeepInterval"
      | "userAlertCount"
      | "userPurchases"
      | "vrfCoordinator"
      | "vrfRequests"
      | "vrfSubscriptionId"
      | "weatherDataFeed"
      | "withdrawLink"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommunityAlertTriggered"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "PhotoAnalysisCompleted"
      | "PhotoAnalysisRequested"
      | "PurchaseProcessed"
      | "RandomnessReceived"
      | "RandomnessRequested"
      | "RequestFulfilled"
      | "RequestSent"
      | "TreatmentCompleted"
      | "TreatmentStarted"
      | "UpkeepPerformed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeAlerts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeTreatments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "agroToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allDetections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "communityAlerts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "communityAlertsSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeTreatment",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "detections",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "donID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethUsdPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveCommunityAlerts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDetections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpkeepTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketIntelligenceSource",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numWords", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "photoVerificationSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processPurchase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseOptimizationSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPhotoAnalysis",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTreatment",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treatmentTrackingSource",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treatments", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAlertCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPurchases",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfSubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weatherDataFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAlerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeTreatments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agroToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allDetections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityAlerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityAlertsSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTreatment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "detections", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethUsdPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCommunityAlerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDetections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpkeepTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketIntelligenceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numWords", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "photoVerificationSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseOptimizationSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPhotoAnalysis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTreatment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treatmentTrackingSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treatments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAlertCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weatherDataFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;
}

export namespace CommunityAlertTriggeredEvent {
  export type InputTuple = [
    disease: string,
    location: string,
    severity: BigNumberish
  ];
  export type OutputTuple = [
    disease: string,
    location: string,
    severity: bigint
  ];
  export interface OutputObject {
    disease: string;
    location: string;
    severity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhotoAnalysisCompletedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    user: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [requestId: string, user: string, reward: bigint];
  export interface OutputObject {
    requestId: string;
    user: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhotoAnalysisRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    user: AddressLike,
    ipfsHash: string
  ];
  export type OutputTuple = [requestId: string, user: string, ipfsHash: string];
  export interface OutputObject {
    requestId: string;
    user: string;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseProcessedEvent {
  export type InputTuple = [
    user: AddressLike,
    productId: string,
    amount: BigNumberish,
    discount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    productId: string,
    amount: bigint,
    discount: bigint
  ];
  export interface OutputObject {
    user: string;
    productId: string;
    amount: bigint;
    discount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessReceivedEvent {
  export type InputTuple = [requestId: BigNumberish, randomValue: BigNumberish];
  export type OutputTuple = [requestId: bigint, randomValue: bigint];
  export interface OutputObject {
    requestId: bigint;
    randomValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [requestId: BigNumberish, user: AddressLike];
  export type OutputTuple = [requestId: bigint, user: string];
  export interface OutputObject {
    requestId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreatmentCompletedEvent {
  export type InputTuple = [
    user: AddressLike,
    treatmentId: string,
    successful: boolean
  ];
  export type OutputTuple = [
    user: string,
    treatmentId: string,
    successful: boolean
  ];
  export interface OutputObject {
    user: string;
    treatmentId: string;
    successful: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreatmentStartedEvent {
  export type InputTuple = [
    user: AddressLike,
    treatmentId: string,
    disease: string
  ];
  export type OutputTuple = [
    user: string,
    treatmentId: string,
    disease: string
  ];
  export interface OutputObject {
    user: string;
    treatmentId: string;
    disease: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpkeepPerformedEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    alertsChecked: BigNumberish
  ];
  export type OutputTuple = [timestamp: bigint, alertsChecked: bigint];
  export interface OutputObject {
    timestamp: bigint;
    alertsChecked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgroAICore extends BaseContract {
  connect(runner?: ContractRunner | null): AgroAICore;
  waitForDeployment(): Promise<this>;

  interface: AgroAICoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  activeAlerts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  activeTreatments: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  agroToken: TypedContractMethod<[], [string], "view">;

  allDetections: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  callbackGasLimit: TypedContractMethod<[], [bigint], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;

  communityAlerts: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        disease: string;
        location: string;
        severity: bigint;
        timestamp: bigint;
        affectedUsers: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  communityAlertsSource: TypedContractMethod<[], [string], "view">;

  completeTreatment: TypedContractMethod<
    [
      treatmentId: string,
      successful: boolean,
      effectivenessScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  detections: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        user: string;
        ipfsHash: string;
        cropType: string;
        location: string;
        disease: string;
        confidence: bigint;
        timestamp: bigint;
        verified: boolean;
        rewardAmount: bigint;
        chainlinkRequestId: string;
      }
    ],
    "view"
  >;

  donID: TypedContractMethod<[], [string], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  ethUsdPriceFeed: TypedContractMethod<[], [string], "view">;

  gasLimit: TypedContractMethod<[], [bigint], "view">;

  getActiveCommunityAlerts: TypedContractMethod<[], [string[]], "view">;

  getUserDetections: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  keyHash: TypedContractMethod<[], [string], "view">;

  lastUpkeepTime: TypedContractMethod<[], [bigint], "view">;

  marketIntelligenceSource: TypedContractMethod<[], [string], "view">;

  numWords: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRequests: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  photoVerificationSource: TypedContractMethod<[], [string], "view">;

  processPurchase: TypedContractMethod<
    [productId: string, baseAmount: BigNumberish],
    [[bigint, bigint] & { discount: bigint; cashback: bigint }],
    "nonpayable"
  >;

  purchaseOptimizationSource: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestConfirmations: TypedContractMethod<[], [bigint], "view">;

  requestPhotoAnalysis: TypedContractMethod<
    [
      backendUrl: string,
      ipfsHash: string,
      cropType: string,
      location: string,
      latitude: string,
      longitude: string
    ],
    [string],
    "nonpayable"
  >;

  requestRandomness: TypedContractMethod<[], [bigint], "nonpayable">;

  startTreatment: TypedContractMethod<
    [treatmentId: string, disease: string, expectedDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  treatmentTrackingSource: TypedContractMethod<[], [string], "view">;

  treatments: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean, boolean, bigint] & {
        user: string;
        treatmentId: string;
        disease: string;
        startTime: bigint;
        expectedDuration: bigint;
        completed: boolean;
        successful: boolean;
        effectivenessScore: bigint;
      }
    ],
    "view"
  >;

  updateConfig: TypedContractMethod<
    [
      _gasLimit: BigNumberish,
      _upkeepInterval: BigNumberish,
      _donID: BytesLike,
      _subscriptionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  upkeepInterval: TypedContractMethod<[], [bigint], "view">;

  userAlertCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userPurchases: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        user: string;
        productId: string;
        amount: bigint;
        tokensUsed: bigint;
        discount: bigint;
        cashback: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  vrfCoordinator: TypedContractMethod<[], [string], "view">;

  vrfRequests: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  vrfSubscriptionId: TypedContractMethod<[], [bigint], "view">;

  weatherDataFeed: TypedContractMethod<[], [string], "view">;

  withdrawLink: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activeAlerts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "activeTreatments"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "agroToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allDetections"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "callbackGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "communityAlerts"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        disease: string;
        location: string;
        severity: bigint;
        timestamp: bigint;
        affectedUsers: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "communityAlertsSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "completeTreatment"
  ): TypedContractMethod<
    [
      treatmentId: string,
      successful: boolean,
      effectivenessScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "detections"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string
      ] & {
        user: string;
        ipfsHash: string;
        cropType: string;
        location: string;
        disease: string;
        confidence: bigint;
        timestamp: bigint;
        verified: boolean;
        rewardAmount: bigint;
        chainlinkRequestId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "donID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ethUsdPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActiveCommunityAlerts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserDetections"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "keyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastUpkeepTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketIntelligenceSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numWords"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRequests"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "photoVerificationSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processPurchase"
  ): TypedContractMethod<
    [productId: string, baseAmount: BigNumberish],
    [[bigint, bigint] & { discount: bigint; cashback: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "purchaseOptimizationSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestPhotoAnalysis"
  ): TypedContractMethod<
    [
      backendUrl: string,
      ipfsHash: string,
      cropType: string,
      location: string,
      latitude: string,
      longitude: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestRandomness"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "startTreatment"
  ): TypedContractMethod<
    [treatmentId: string, disease: string, expectedDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treatmentTrackingSource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treatments"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean, boolean, bigint] & {
        user: string;
        treatmentId: string;
        disease: string;
        startTime: bigint;
        expectedDuration: bigint;
        completed: boolean;
        successful: boolean;
        effectivenessScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [
      _gasLimit: BigNumberish,
      _upkeepInterval: BigNumberish,
      _donID: BytesLike,
      _subscriptionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upkeepInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userAlertCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPurchases"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        user: string;
        productId: string;
        amount: bigint;
        tokensUsed: bigint;
        discount: bigint;
        cashback: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vrfRequests"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "vrfSubscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "weatherDataFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawLink"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CommunityAlertTriggered"
  ): TypedContractEvent<
    CommunityAlertTriggeredEvent.InputTuple,
    CommunityAlertTriggeredEvent.OutputTuple,
    CommunityAlertTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PhotoAnalysisCompleted"
  ): TypedContractEvent<
    PhotoAnalysisCompletedEvent.InputTuple,
    PhotoAnalysisCompletedEvent.OutputTuple,
    PhotoAnalysisCompletedEvent.OutputObject
  >;
  getEvent(
    key: "PhotoAnalysisRequested"
  ): TypedContractEvent<
    PhotoAnalysisRequestedEvent.InputTuple,
    PhotoAnalysisRequestedEvent.OutputTuple,
    PhotoAnalysisRequestedEvent.OutputObject
  >;
  getEvent(
    key: "PurchaseProcessed"
  ): TypedContractEvent<
    PurchaseProcessedEvent.InputTuple,
    PurchaseProcessedEvent.OutputTuple,
    PurchaseProcessedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessReceived"
  ): TypedContractEvent<
    RandomnessReceivedEvent.InputTuple,
    RandomnessReceivedEvent.OutputTuple,
    RandomnessReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "TreatmentCompleted"
  ): TypedContractEvent<
    TreatmentCompletedEvent.InputTuple,
    TreatmentCompletedEvent.OutputTuple,
    TreatmentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TreatmentStarted"
  ): TypedContractEvent<
    TreatmentStartedEvent.InputTuple,
    TreatmentStartedEvent.OutputTuple,
    TreatmentStartedEvent.OutputObject
  >;
  getEvent(
    key: "UpkeepPerformed"
  ): TypedContractEvent<
    UpkeepPerformedEvent.InputTuple,
    UpkeepPerformedEvent.OutputTuple,
    UpkeepPerformedEvent.OutputObject
  >;

  filters: {
    "CommunityAlertTriggered(string,string,uint256)": TypedContractEvent<
      CommunityAlertTriggeredEvent.InputTuple,
      CommunityAlertTriggeredEvent.OutputTuple,
      CommunityAlertTriggeredEvent.OutputObject
    >;
    CommunityAlertTriggered: TypedContractEvent<
      CommunityAlertTriggeredEvent.InputTuple,
      CommunityAlertTriggeredEvent.OutputTuple,
      CommunityAlertTriggeredEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PhotoAnalysisCompleted(bytes32,address,uint256)": TypedContractEvent<
      PhotoAnalysisCompletedEvent.InputTuple,
      PhotoAnalysisCompletedEvent.OutputTuple,
      PhotoAnalysisCompletedEvent.OutputObject
    >;
    PhotoAnalysisCompleted: TypedContractEvent<
      PhotoAnalysisCompletedEvent.InputTuple,
      PhotoAnalysisCompletedEvent.OutputTuple,
      PhotoAnalysisCompletedEvent.OutputObject
    >;

    "PhotoAnalysisRequested(bytes32,address,string)": TypedContractEvent<
      PhotoAnalysisRequestedEvent.InputTuple,
      PhotoAnalysisRequestedEvent.OutputTuple,
      PhotoAnalysisRequestedEvent.OutputObject
    >;
    PhotoAnalysisRequested: TypedContractEvent<
      PhotoAnalysisRequestedEvent.InputTuple,
      PhotoAnalysisRequestedEvent.OutputTuple,
      PhotoAnalysisRequestedEvent.OutputObject
    >;

    "PurchaseProcessed(address,string,uint256,uint256)": TypedContractEvent<
      PurchaseProcessedEvent.InputTuple,
      PurchaseProcessedEvent.OutputTuple,
      PurchaseProcessedEvent.OutputObject
    >;
    PurchaseProcessed: TypedContractEvent<
      PurchaseProcessedEvent.InputTuple,
      PurchaseProcessedEvent.OutputTuple,
      PurchaseProcessedEvent.OutputObject
    >;

    "RandomnessReceived(uint256,uint256)": TypedContractEvent<
      RandomnessReceivedEvent.InputTuple,
      RandomnessReceivedEvent.OutputTuple,
      RandomnessReceivedEvent.OutputObject
    >;
    RandomnessReceived: TypedContractEvent<
      RandomnessReceivedEvent.InputTuple,
      RandomnessReceivedEvent.OutputTuple,
      RandomnessReceivedEvent.OutputObject
    >;

    "RandomnessRequested(uint256,address)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "TreatmentCompleted(address,string,bool)": TypedContractEvent<
      TreatmentCompletedEvent.InputTuple,
      TreatmentCompletedEvent.OutputTuple,
      TreatmentCompletedEvent.OutputObject
    >;
    TreatmentCompleted: TypedContractEvent<
      TreatmentCompletedEvent.InputTuple,
      TreatmentCompletedEvent.OutputTuple,
      TreatmentCompletedEvent.OutputObject
    >;

    "TreatmentStarted(address,string,string)": TypedContractEvent<
      TreatmentStartedEvent.InputTuple,
      TreatmentStartedEvent.OutputTuple,
      TreatmentStartedEvent.OutputObject
    >;
    TreatmentStarted: TypedContractEvent<
      TreatmentStartedEvent.InputTuple,
      TreatmentStartedEvent.OutputTuple,
      TreatmentStartedEvent.OutputObject
    >;

    "UpkeepPerformed(uint256,uint256)": TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;
    UpkeepPerformed: TypedContractEvent<
      UpkeepPerformedEvent.InputTuple,
      UpkeepPerformedEvent.OutputTuple,
      UpkeepPerformedEvent.OutputObject
    >;
  };
}
