/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AgroAITokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CASHBACK_RATE"
      | "DISCOUNT_RATE"
      | "DISEASE_BONUS"
      | "EARLY_DETECTION_BONUS"
      | "HEALTHY_BONUS"
      | "INITIAL_SUPPLY"
      | "MAX_SUPPLY"
      | "PHOTO_REWARD"
      | "REFERRAL_REWARD"
      | "TIER_1_THRESHOLD"
      | "TIER_2_THRESHOLD"
      | "TIER_3_THRESHOLD"
      | "TIER_4_THRESHOLD"
      | "TREATMENT_SUCCESS_BONUS"
      | "addAuthorizedBurner"
      | "addAuthorizedMinter"
      | "allowance"
      | "approve"
      | "authorizedBurners"
      | "authorizedMinters"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "calculateDiscount"
      | "decimals"
      | "decreaseAllowance"
      | "diseaseDetections"
      | "emergencyWithdraw"
      | "getContractInfo"
      | "getUserStats"
      | "hasReferralBonus"
      | "increaseAllowance"
      | "lastActivityTime"
      | "mint"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "photoCount"
      | "processPurchase"
      | "removeAuthorizedBurner"
      | "removeAuthorizedMinter"
      | "renounceOwnership"
      | "rewardDiseaseDetection"
      | "rewardHealthyPlant"
      | "rewardPhotoUpload"
      | "rewardReferral"
      | "rewardTreatmentSuccess"
      | "symbol"
      | "totalPurchases"
      | "totalSavings"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "userTier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "AuthorizedMinterAdded"
      | "AuthorizedMinterRemoved"
      | "DiseaseDetectionRewarded"
      | "OwnershipTransferred"
      | "Paused"
      | "PhotoRewarded"
      | "PurchaseProcessed"
      | "ReferralRewarded"
      | "TierUpdated"
      | "Transfer"
      | "TreatmentSuccessRewarded"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CASHBACK_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISCOUNT_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISEASE_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EARLY_DETECTION_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEALTHY_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHOTO_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_1_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_2_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_3_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_4_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREATMENT_SUCCESS_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedBurner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBurners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedMinters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDiscount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diseaseDetections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReferralBonus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastActivityTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "photoCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processPurchase",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedBurner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDiseaseDetection",
    values: [AddressLike, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardHealthyPlant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPhotoUpload",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardReferral",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTreatmentSuccess",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPurchases",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSavings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userTier",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CASHBACK_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISCOUNT_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISEASE_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EARLY_DETECTION_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEALTHY_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PHOTO_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_1_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_2_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_3_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_4_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREATMENT_SUCCESS_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedBurner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBurners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diseaseDetections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReferralBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastActivityTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "photoCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedBurner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDiseaseDetection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardHealthyPlant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPhotoUpload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTreatmentSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSavings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userTier", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedMinterAddedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedMinterRemovedEvent {
  export type InputTuple = [minter: AddressLike];
  export type OutputTuple = [minter: string];
  export interface OutputObject {
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiseaseDetectionRewardedEvent {
  export type InputTuple = [
    user: AddressLike,
    bonus: BigNumberish,
    disease: string,
    isEarlyDetection: boolean
  ];
  export type OutputTuple = [
    user: string,
    bonus: bigint,
    disease: string,
    isEarlyDetection: boolean
  ];
  export interface OutputObject {
    user: string;
    bonus: bigint;
    disease: string;
    isEarlyDetection: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhotoRewardedEvent {
  export type InputTuple = [
    user: AddressLike,
    reward: BigNumberish,
    photoNumber: BigNumberish
  ];
  export type OutputTuple = [user: string, reward: bigint, photoNumber: bigint];
  export interface OutputObject {
    user: string;
    reward: bigint;
    photoNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseProcessedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    discount: BigNumberish,
    cashback: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    discount: bigint,
    cashback: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    discount: bigint;
    cashback: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralRewardedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    referred: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    referred: string,
    reward: bigint
  ];
  export interface OutputObject {
    referrer: string;
    referred: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TierUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    oldTier: BigNumberish,
    newTier: BigNumberish
  ];
  export type OutputTuple = [user: string, oldTier: bigint, newTier: bigint];
  export interface OutputObject {
    user: string;
    oldTier: bigint;
    newTier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreatmentSuccessRewardedEvent {
  export type InputTuple = [
    user: AddressLike,
    bonus: BigNumberish,
    treatmentId: string
  ];
  export type OutputTuple = [user: string, bonus: bigint, treatmentId: string];
  export interface OutputObject {
    user: string;
    bonus: bigint;
    treatmentId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgroAIToken extends BaseContract {
  connect(runner?: ContractRunner | null): AgroAIToken;
  waitForDeployment(): Promise<this>;

  interface: AgroAITokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CASHBACK_RATE: TypedContractMethod<[], [bigint], "view">;

  DISCOUNT_RATE: TypedContractMethod<[], [bigint], "view">;

  DISEASE_BONUS: TypedContractMethod<[], [bigint], "view">;

  EARLY_DETECTION_BONUS: TypedContractMethod<[], [bigint], "view">;

  HEALTHY_BONUS: TypedContractMethod<[], [bigint], "view">;

  INITIAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  PHOTO_REWARD: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_REWARD: TypedContractMethod<[], [bigint], "view">;

  TIER_1_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  TIER_2_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  TIER_3_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  TIER_4_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  TREATMENT_SUCCESS_BONUS: TypedContractMethod<[], [bigint], "view">;

  addAuthorizedBurner: TypedContractMethod<
    [burner: AddressLike],
    [void],
    "nonpayable"
  >;

  addAuthorizedMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  authorizedBurners: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  authorizedMinters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateDiscount: TypedContractMethod<
    [user: AddressLike, purchaseAmount: BigNumberish],
    [
      [bigint, bigint, boolean, bigint] & {
        discountAmount: bigint;
        cashbackAmount: bigint;
        canAffordDiscount: boolean;
        tierMultiplier: bigint;
      }
    ],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  diseaseDetections: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getContractInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalSupply_: bigint;
        maxSupply: bigint;
        photoReward: bigint;
        diseaseBonus: bigint;
        discountRate: bigint;
        cashbackRate: bigint;
      }
    ],
    "view"
  >;

  getUserStats: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        tokenBalance: bigint;
        photos: bigint;
        detections: bigint;
        purchases: bigint;
        savings: bigint;
        tier: bigint;
        lastActivity: bigint;
      }
    ],
    "view"
  >;

  hasReferralBonus: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  lastActivityTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  photoCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  processPurchase: TypedContractMethod<
    [user: AddressLike, purchaseAmount: BigNumberish],
    [[bigint, bigint] & { discount: bigint; cashback: bigint }],
    "nonpayable"
  >;

  removeAuthorizedBurner: TypedContractMethod<
    [burner: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAuthorizedMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardDiseaseDetection: TypedContractMethod<
    [user: AddressLike, isEarlyDetection: boolean, disease: string],
    [void],
    "nonpayable"
  >;

  rewardHealthyPlant: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardPhotoUpload: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardReferral: TypedContractMethod<
    [referrer: AddressLike, referred: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardTreatmentSuccess: TypedContractMethod<
    [user: AddressLike, treatmentId: string],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalPurchases: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalSavings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userTier: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CASHBACK_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DISCOUNT_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DISEASE_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EARLY_DETECTION_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HEALTHY_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INITIAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PHOTO_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_1_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_2_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_3_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_4_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TREATMENT_SUCCESS_BONUS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAuthorizedBurner"
  ): TypedContractMethod<[burner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAuthorizedMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedBurners"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedMinters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateDiscount"
  ): TypedContractMethod<
    [user: AddressLike, purchaseAmount: BigNumberish],
    [
      [bigint, bigint, boolean, bigint] & {
        discountAmount: bigint;
        cashbackAmount: bigint;
        canAffordDiscount: boolean;
        tierMultiplier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "diseaseDetections"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContractInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalSupply_: bigint;
        maxSupply: bigint;
        photoReward: bigint;
        diseaseBonus: bigint;
        discountRate: bigint;
        cashbackRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserStats"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        tokenBalance: bigint;
        photos: bigint;
        detections: bigint;
        purchases: bigint;
        savings: bigint;
        tier: bigint;
        lastActivity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasReferralBonus"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastActivityTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "photoCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processPurchase"
  ): TypedContractMethod<
    [user: AddressLike, purchaseAmount: BigNumberish],
    [[bigint, bigint] & { discount: bigint; cashback: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorizedBurner"
  ): TypedContractMethod<[burner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuthorizedMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardDiseaseDetection"
  ): TypedContractMethod<
    [user: AddressLike, isEarlyDetection: boolean, disease: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardHealthyPlant"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardPhotoUpload"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardReferral"
  ): TypedContractMethod<
    [referrer: AddressLike, referred: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardTreatmentSuccess"
  ): TypedContractMethod<
    [user: AddressLike, treatmentId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalPurchases"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSavings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTier"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedMinterAdded"
  ): TypedContractEvent<
    AuthorizedMinterAddedEvent.InputTuple,
    AuthorizedMinterAddedEvent.OutputTuple,
    AuthorizedMinterAddedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedMinterRemoved"
  ): TypedContractEvent<
    AuthorizedMinterRemovedEvent.InputTuple,
    AuthorizedMinterRemovedEvent.OutputTuple,
    AuthorizedMinterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DiseaseDetectionRewarded"
  ): TypedContractEvent<
    DiseaseDetectionRewardedEvent.InputTuple,
    DiseaseDetectionRewardedEvent.OutputTuple,
    DiseaseDetectionRewardedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PhotoRewarded"
  ): TypedContractEvent<
    PhotoRewardedEvent.InputTuple,
    PhotoRewardedEvent.OutputTuple,
    PhotoRewardedEvent.OutputObject
  >;
  getEvent(
    key: "PurchaseProcessed"
  ): TypedContractEvent<
    PurchaseProcessedEvent.InputTuple,
    PurchaseProcessedEvent.OutputTuple,
    PurchaseProcessedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralRewarded"
  ): TypedContractEvent<
    ReferralRewardedEvent.InputTuple,
    ReferralRewardedEvent.OutputTuple,
    ReferralRewardedEvent.OutputObject
  >;
  getEvent(
    key: "TierUpdated"
  ): TypedContractEvent<
    TierUpdatedEvent.InputTuple,
    TierUpdatedEvent.OutputTuple,
    TierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TreatmentSuccessRewarded"
  ): TypedContractEvent<
    TreatmentSuccessRewardedEvent.InputTuple,
    TreatmentSuccessRewardedEvent.OutputTuple,
    TreatmentSuccessRewardedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AuthorizedMinterAdded(address)": TypedContractEvent<
      AuthorizedMinterAddedEvent.InputTuple,
      AuthorizedMinterAddedEvent.OutputTuple,
      AuthorizedMinterAddedEvent.OutputObject
    >;
    AuthorizedMinterAdded: TypedContractEvent<
      AuthorizedMinterAddedEvent.InputTuple,
      AuthorizedMinterAddedEvent.OutputTuple,
      AuthorizedMinterAddedEvent.OutputObject
    >;

    "AuthorizedMinterRemoved(address)": TypedContractEvent<
      AuthorizedMinterRemovedEvent.InputTuple,
      AuthorizedMinterRemovedEvent.OutputTuple,
      AuthorizedMinterRemovedEvent.OutputObject
    >;
    AuthorizedMinterRemoved: TypedContractEvent<
      AuthorizedMinterRemovedEvent.InputTuple,
      AuthorizedMinterRemovedEvent.OutputTuple,
      AuthorizedMinterRemovedEvent.OutputObject
    >;

    "DiseaseDetectionRewarded(address,uint256,string,bool)": TypedContractEvent<
      DiseaseDetectionRewardedEvent.InputTuple,
      DiseaseDetectionRewardedEvent.OutputTuple,
      DiseaseDetectionRewardedEvent.OutputObject
    >;
    DiseaseDetectionRewarded: TypedContractEvent<
      DiseaseDetectionRewardedEvent.InputTuple,
      DiseaseDetectionRewardedEvent.OutputTuple,
      DiseaseDetectionRewardedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PhotoRewarded(address,uint256,uint256)": TypedContractEvent<
      PhotoRewardedEvent.InputTuple,
      PhotoRewardedEvent.OutputTuple,
      PhotoRewardedEvent.OutputObject
    >;
    PhotoRewarded: TypedContractEvent<
      PhotoRewardedEvent.InputTuple,
      PhotoRewardedEvent.OutputTuple,
      PhotoRewardedEvent.OutputObject
    >;

    "PurchaseProcessed(address,uint256,uint256,uint256)": TypedContractEvent<
      PurchaseProcessedEvent.InputTuple,
      PurchaseProcessedEvent.OutputTuple,
      PurchaseProcessedEvent.OutputObject
    >;
    PurchaseProcessed: TypedContractEvent<
      PurchaseProcessedEvent.InputTuple,
      PurchaseProcessedEvent.OutputTuple,
      PurchaseProcessedEvent.OutputObject
    >;

    "ReferralRewarded(address,address,uint256)": TypedContractEvent<
      ReferralRewardedEvent.InputTuple,
      ReferralRewardedEvent.OutputTuple,
      ReferralRewardedEvent.OutputObject
    >;
    ReferralRewarded: TypedContractEvent<
      ReferralRewardedEvent.InputTuple,
      ReferralRewardedEvent.OutputTuple,
      ReferralRewardedEvent.OutputObject
    >;

    "TierUpdated(address,uint256,uint256)": TypedContractEvent<
      TierUpdatedEvent.InputTuple,
      TierUpdatedEvent.OutputTuple,
      TierUpdatedEvent.OutputObject
    >;
    TierUpdated: TypedContractEvent<
      TierUpdatedEvent.InputTuple,
      TierUpdatedEvent.OutputTuple,
      TierUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TreatmentSuccessRewarded(address,uint256,string)": TypedContractEvent<
      TreatmentSuccessRewardedEvent.InputTuple,
      TreatmentSuccessRewardedEvent.OutputTuple,
      TreatmentSuccessRewardedEvent.OutputObject
    >;
    TreatmentSuccessRewarded: TypedContractEvent<
      TreatmentSuccessRewardedEvent.InputTuple,
      TreatmentSuccessRewardedEvent.OutputTuple,
      TreatmentSuccessRewardedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
